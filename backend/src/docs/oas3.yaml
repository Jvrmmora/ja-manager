openapi: 3.0.0
info:
  title: Youth Management API
  version: 1.0.0
  description: |
    API REST para la gestión de jóvenes de iglesia. Permite crear, leer, actualizar y eliminar información de jóvenes, así como importar/exportar datos desde Excel.

    ## Características principales:
    - CRUD completo para gestión de jóvenes
    - Subida de imágenes a Cloudinary
    - Importación/exportación desde Excel
    - Filtros y búsqueda avanzada
    - Estadísticas agregadas

  contact:
    name: Javier Montaño
    email: 'jvrm.mora@gmail.com'
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:4500/api
    description: Servidor de desarrollo
  - url: https://your-production-url.com/api
    description: Servidor de producción

tags:
  - name: Health
    description: Endpoints para verificar el estado de la API
  - name: Authentication
    description: Operaciones de autenticación y autorización con JWT
  - name: Young
    description: Operaciones CRUD para gestión de jóvenes
  - name: Import/Export
    description: Operaciones para importar y exportar datos desde Excel
  - name: QR
    description: Operaciones para gestión de códigos QR de asistencia
  - name: Attendance
    description: Operaciones para registro y gestión de asistencias
  - name: Seasons
    description: Gestión de temporadas para el sistema de puntos y gamificación
  - name: Points
    description: Sistema de puntos, transacciones y gamificación

paths:
  /health:
    get:
      summary: Verificar estado de la API
      description: Endpoint para verificar que la API está funcionando correctamente
      tags: [Health]
      responses:
        '200':
          description: API funcionando correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/login:
    post:
      summary: Iniciar sesión
      description: Autentica un usuario usando email/placa y contraseña, retorna un token JWT
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingCredentials:
                  summary: Credenciales faltantes
                  value:
                    error: 'Email/placa y contraseña son requeridos'
                invalidCredentials:
                  summary: Credenciales inválidas
                  value:
                    error: 'Credenciales inválidas'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'Usuario no encontrado'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/profile:
    get:
      summary: Obtener perfil del usuario autenticado
      description: Retorna la información del perfil del usuario autenticado
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/logout:
    post:
      summary: Cerrar sesión
      description: Invalida el token JWT del usuario (logout del lado del cliente)
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Logout exitoso'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /young:
    get:
      summary: Obtener todos los jóvenes
      description: Retorna una lista paginada de todos los jóvenes registrados con filtros opcionales
      tags: [Young]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Número de página
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Número de elementos por página
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: search
          in: query
          description: Búsqueda por nombre
          schema:
            type: string
        - name: ageRange
          in: query
          description: Filtrar por rango de edad
          schema:
            type: string
            enum:
              - '13-15'
              - '16-18'
              - '19-21'
              - '22-25'
              - '26-30'
              - '30+'
        - name: role
          in: query
          description: Filtrar por rol
          schema:
            type: string
        - name: gender
          in: query
          description: Filtrar por género
          schema:
            type: string
            enum:
              - masculino
              - femenino
        - name: group
          in: query
          description: Filtrar por grupo
          schema:
            type: integer
            minimum: 1
            maximum: 5
      responses:
        '200':
          description: Lista de jóvenes obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Young'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 150
                      pages:
                        type: integer
                        example: 15
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Crear un nuevo joven
      description: Crea un nuevo registro de joven. Acepta FormData para subida de imagen
      tags: [Young]
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - fullName
                - ageRange
                - role
              properties:
                fullName:
                  type: string
                  description: Nombre completo del joven
                  example: Juan Pérez García
                ageRange:
                  type: string
                  enum:
                    - '13-15'
                    - '16-18'
                    - '19-21'
                    - '22-25'
                    - '26-30'
                    - '30+'
                  description: Rango de edad
                  example: '19-21'
                phone:
                  type: string
                  description: Número de teléfono
                  example: '+1234567890'
                birthday:
                  type: string
                  format: date
                  description: Fecha de nacimiento
                  example: '2000-05-15'
                gender:
                  type: string
                  enum:
                    - masculino
                    - femenino
                    - ''
                  description: Género
                  example: masculino
                role:
                  type: string
                  enum:
                    - lider juvenil
                    - simpatizante
                    - colaborador
                    - joven adventista
                    - director
                    - subdirector
                    - club guias
                    - club conquistadores
                    - club aventureros
                    - escuela sabatica
                  description: Rol en la iglesia
                  example: joven adventista
                email:
                  type: string
                  format: email
                  description: Correo electrónico
                  example: juan.perez@email.com
                skills:
                  type: string
                  description: Habilidades en formato JSON string
                  example: '["música", "predicación", "liderazgo"]'
                group:
                  type: integer
                  minimum: 1
                  maximum: 5
                  description: Grupo para clasificación
                  example: 3
                profileImage:
                  type: string
                  format: binary
                  description: Imagen de perfil (archivo)
          application/json:
            schema:
              $ref: '#/components/schemas/YoungInput'
      responses:
        '201':
          description: Joven creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Young'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /young/stats:
    get:
      summary: Obtener estadísticas de jóvenes
      description: Retorna estadísticas agregadas de los jóvenes registrados
      tags: [Young]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Estadísticas obtenidas exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YoungStats'
        '500':
          $ref: '#/components/responses/ServerError'

  /young/{id}:
    get:
      summary: Obtener un joven por ID
      description: Retorna la información de un joven específico
      tags: [Young]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID único del joven
          schema:
            type: string
          example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: Joven encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Young'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: Actualizar un joven
      description: Actualiza la información de un joven existente. Acepta FormData para subida de imagen
      tags: [Young]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID único del joven
          schema:
            type: string
          example: 507f1f77bcf86cd799439011
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  description: Nombre completo del joven
                  example: Juan Pérez García
                ageRange:
                  type: string
                  enum:
                    - '13-15'
                    - '16-18'
                    - '19-21'
                    - '22-25'
                    - '26-30'
                    - '30+'
                  description: Rango de edad
                  example: '19-21'
                phone:
                  type: string
                  description: Número de teléfono
                  example: '+1234567890'
                birthday:
                  type: string
                  format: date
                  description: Fecha de nacimiento
                  example: '2000-05-15'
                gender:
                  type: string
                  enum:
                    - masculino
                    - femenino
                    - ''
                  description: Género
                  example: masculino
                role:
                  type: string
                  enum:
                    - lider juvenil
                    - simpatizante
                    - colaborador
                    - joven adventista
                    - director
                    - subdirector
                    - club guias
                    - club conquistadores
                    - club aventureros
                    - escuela sabatica
                  description: Rol en la iglesia
                  example: joven adventista
                email:
                  type: string
                  format: email
                  description: Correo electrónico
                  example: juan.perez@email.com
                skills:
                  type: string
                  description: Habilidades en formato JSON string
                  example: '["música", "predicación", "liderazgo"]'
                group:
                  type: integer
                  minimum: 1
                  maximum: 5
                  description: Grupo para clasificación
                  example: 3
                profileImage:
                  type: string
                  format: binary
                  description: Imagen de perfil (archivo)
          application/json:
            schema:
              $ref: '#/components/schemas/YoungInput'
      responses:
        '200':
          description: Joven actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Young'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Eliminar un joven
      description: Elimina un joven del sistema. También elimina su imagen de perfil de Cloudinary si existe
      tags: [Young]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID único del joven
          schema:
            type: string
          example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: Joven eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Joven eliminado exitosamente
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /young/{id}/generate-placa:
    put:
      summary: Generar placa y contraseña para un joven
      description: Genera una placa única y contraseña temporal para un joven
      tags: [Young]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID único del joven
          schema:
            type: string
          example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: Placa y contraseña generadas exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Placa y contraseña generadas exitosamente
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: ID único del joven
                        example: '507f1f77bcf86cd799439011'
                      fullName:
                        type: string
                        description: Nombre completo del joven
                        example: 'Javier Mora'
                      placa:
                        type: string
                        description: Placa única generada
                        example: '@MODJAVI001'
                      tempPassword:
                        type: string
                        description: Contraseña temporal generada
                        example: 'PassMODJAV'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Conflicto - El joven ya tiene placa asignada
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: El joven ya tiene una placa asignada
        '500':
          $ref: '#/components/responses/ServerError'

  /young/{id}/reset-password:
    put:
      summary: Resetear contraseña de un joven
      description: Permite resetear la contraseña de un joven (solo en primer login)
      tags: [Young]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID único del joven
          schema:
            type: string
          example: 507f1f77bcf86cd799439011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - new_password
              properties:
                current_password:
                  type: string
                  description: 'Contraseña actual (OBLIGATORIA para Young role, IGNORADA para Super Admin)'
                  example: 'PassMODJAV'
                new_password:
                  type: string
                  description: Nueva contraseña (8-50 caracteres, debe incluir mayúscula, minúscula y número)
                  example: 'MiNuevaPassword123'
      responses:
        '200':
          description: Contraseña reseteada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Contraseña actualizada exitosamente
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: ID único del joven
                        example: '507f1f77bcf86cd799439011'
                      fullName:
                        type: string
                        description: Nombre completo del joven
                        example: 'Javier Mora'
                      first_login:
                        type: boolean
                        description: Indica si es el primer login (siempre false después del reset)
                        example: false
        '400':
          description: Error de validación
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'La nueva contraseña debe tener entre 8-50 caracteres, incluir al menos una mayúscula, una minúscula y un número'
        '403':
          description: Sin permisos para cambiar esta contraseña
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'No tienes permisos para cambiar esta contraseña'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /import/import:
    post:
      summary: Importar jóvenes desde Excel
      description: Permite importar múltiples jóvenes desde un archivo Excel (.xlsx o .xls)
      tags: [Import/Export]
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Archivo Excel con datos de jóvenes
      responses:
        '200':
          description: Jóvenes importados exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Jóvenes importados exitosamente
                  imported:
                    type: integer
                    description: Número de jóvenes importados
                    example: 25
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        row:
                          type: integer
                          description: Número de fila con error
                        error:
                          type: string
                          description: Descripción del error
                    description: Lista de errores encontrados durante la importación
        '400':
          description: Error en el formato del archivo o datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'

  /import/template:
    get:
      summary: Descargar plantilla de Excel
      description: Descarga un archivo Excel con la plantilla para importar jóvenes
      tags: [Import/Export]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Plantilla descargada exitosamente
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              description: Nombre del archivo de descarga
              schema:
                type: string
                example: 'attachment; filename="plantilla_jovenes.xlsx"'
        '500':
          $ref: '#/components/responses/ServerError'

  /import/export:
    get:
      summary: Exportar jóvenes a Excel
      description: Exporta todos los jóvenes registrados a un archivo Excel
      tags: [Import/Export]
      security:
        - bearerAuth: []
      parameters:
        - name: ageRange
          in: query
          description: Filtrar por rango de edad (opcional)
          schema:
            type: string
            enum:
              - '13-15'
              - '16-18'
              - '19-21'
              - '22-25'
              - '26-30'
              - '30+'
        - name: role
          in: query
          description: Filtrar por rol (opcional)
          schema:
            type: string
        - name: gender
          in: query
          description: Filtrar por género (opcional)
          schema:
            type: string
            enum:
              - masculino
              - femenino
        - name: group
          in: query
          description: Filtrar por grupo (opcional)
          schema:
            type: integer
            minimum: 1
            maximum: 5
      responses:
        '200':
          description: Archivo Excel generado exitosamente
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              description: Nombre del archivo de descarga
              schema:
                type: string
                example: 'attachment; filename="jovenes_2023-12-01.xlsx"'
        '500':
          $ref: '#/components/responses/ServerError'

  # ===== QR Routes =====
  /qr/generate:
    post:
      summary: Generar QR del día
      description: Genera un nuevo código QR para el registro de asistencia del día actual. Solo administradores pueden generar códigos QR.
      tags: [QR]
      security:
        - bearerAuth: []
      responses:
        '201':
          description: QR generado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'QR generado exitosamente'
                  data:
                    $ref: '#/components/schemas/QRCode'
        '200':
          description: QR activo encontrado (ya existe uno para hoy)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'QR activo encontrado'
                  data:
                    $ref: '#/components/schemas/QRCode'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Solo administradores pueden generar QR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'Solo administradores pueden generar códigos QR'
        '500':
          $ref: '#/components/responses/ServerError'

  /qr/current:
    get:
      summary: Obtener QR activo del día
      description: Retorna el código QR activo para el registro de asistencia del día actual
      tags: [QR]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: QR activo encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/QRCode'
        '404':
          description: No hay QR activo para hoy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'No hay QR activo para hoy'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /qr/stats:
    get:
      summary: Obtener estadísticas del QR actual
      description: Retorna estadísticas del código QR activo, incluyendo número de escaneos y participantes únicos
      tags: [QR]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Estadísticas obtenidas exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/QRStats'
        '404':
          description: No hay QR activo para mostrar estadísticas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'No hay QR activo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  # ===== Attendance Routes =====
  /attendance/scan:
    post:
      summary: Escanear QR y registrar asistencia
      description: Permite a un joven escanear el código QR del día para registrar su asistencia
      tags: [Attendance]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
                  format: uuid
                  description: Código UUID del QR escaneado
                  example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479'
      responses:
        '201':
          description: Asistencia registrada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Asistencia registrada exitosamente'
                  data:
                    $ref: '#/components/schemas/Attendance'
        '400':
          description: QR expirado o datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                qrExpired:
                  summary: QR expirado
                  value:
                    error: 'El código QR ha expirado'
                invalidCode:
                  summary: Código inválido
                  value:
                    error: 'Código QR inválido'
        '404':
          description: QR no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'Código QR no encontrado'
        '409':
          description: Ya se registró asistencia hoy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'Ya tienes asistencia registrada para hoy'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /attendance/my-history:
    get:
      summary: Obtener mi historial de asistencias
      description: Retorna el historial personal de asistencias del usuario autenticado
      tags: [Attendance]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Número de página
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Elementos por página
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Historial obtenido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Attendance'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 25
                      pages:
                        type: integer
                        example: 3
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /attendance/date/{date}:
    get:
      summary: Obtener lista de asistencias por fecha específica
      description: Retorna la lista completa de asistencias registradas en una fecha específica con estadísticas. Solo para administradores.
      tags: [Attendance]
      security:
        - bearerAuth: []
      parameters:
        - name: date
          in: path
          required: true
          description: Fecha específica en formato YYYY-MM-DD
          schema:
            type: string
            format: date
            pattern: '^\d{4}-\d{2}-\d{2}$'
          example: '2023-12-15'
      responses:
        '200':
          description: Lista de asistencias obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Lista de asistencias obtenida exitosamente'
                  data:
                    type: object
                    properties:
                      attendances:
                        type: array
                        items:
                          $ref: '#/components/schemas/AttendanceWithUser'
                      date:
                        type: string
                        format: date
                        description: Fecha de las asistencias
                        example: '2023-12-15'
                      stats:
                        type: object
                        properties:
                          totalPresent:
                            type: integer
                            description: Total de jóvenes presentes en la fecha
                            example: 42
                          totalYoung:
                            type: integer
                            description: Total de jóvenes registrados en el sistema
                            example: 65
                          attendancePercentage:
                            type: integer
                            description: Porcentaje de asistencia del día
                            example: 65
        '400':
          description: Formato de fecha inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: 'Formato de fecha inválido. Use YYYY-MM-DD'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Solo administradores pueden ver las asistencias
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: 'Solo los administradores pueden ver esta información'
        '500':
          $ref: '#/components/responses/ServerError'

  /attendance/today:
    get:
      summary: Obtener lista de asistencias del día
      description: Retorna la lista completa de asistencias registradas en el día actual con estadísticas. Solo para administradores.
      tags: [Attendance]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de asistencias obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Lista de asistencias obtenida exitosamente'
                  data:
                    type: object
                    properties:
                      attendances:
                        type: array
                        items:
                          $ref: '#/components/schemas/AttendanceWithUser'
                      date:
                        type: string
                        format: date
                        description: Fecha actual
                        example: '2023-12-15'
                      stats:
                        type: object
                        properties:
                          totalPresent:
                            type: integer
                            description: Total de jóvenes presentes hoy
                            example: 42
                          totalYoung:
                            type: integer
                            description: Total de jóvenes registrados en el sistema
                            example: 65
                          attendancePercentage:
                            type: integer
                            description: Porcentaje de asistencia del día
                            example: 65
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Solo administradores pueden ver todas las asistencias
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: 'Solo los administradores pueden ver esta información'
        '500':
          $ref: '#/components/responses/ServerError'

  /attendance/stats:
    get:
      summary: Obtener estadísticas de asistencia
      description: Retorna estadísticas agregadas de asistencia en un rango de fechas. Solo para administradores.
      tags: [Attendance]
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          description: Fecha de inicio (YYYY-MM-DD)
          schema:
            type: string
            format: date
          example: '2023-12-01'
        - name: endDate
          in: query
          description: Fecha de fin (YYYY-MM-DD)
          schema:
            type: string
            format: date
          example: '2023-12-31'
      responses:
        '200':
          description: Estadísticas obtenidas exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/AttendanceStats'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Solo administradores pueden ver estadísticas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'Solo administradores pueden acceder a esta información'
        '500':
          $ref: '#/components/responses/ServerError'

  # ========================================
  # TEMPORADAS (SEASONS) - Sistema de Puntos
  # ========================================

  /seasons:
    get:
      summary: Listar todas las temporadas
      description: Obtiene la lista completa de temporadas (trimestres) para el sistema de puntos
      tags: [Seasons]
      responses:
        '200':
          description: Lista de temporadas obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  count:
                    type: integer
                    example: 3
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Season'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Crear nueva temporada
      description: Crea una nueva temporada/trimestre para el sistema de puntos (requiere autenticación)
      tags: [Seasons]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeasonCreate'
      responses:
        '201':
          description: Temporada creada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Temporada creada exitosamente'
                  data:
                    $ref: '#/components/schemas/Season'
        '400':
          description: Error de validación
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /seasons/active:
    get:
      summary: Obtener temporada activa
      description: Obtiene la temporada actualmente en curso
      tags: [Seasons]
      responses:
        '200':
          description: Temporada activa obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Season'
        '404':
          description: No hay temporada activa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: 'No hay temporada activa'
        '500':
          $ref: '#/components/responses/ServerError'

  /seasons/{id}:
    get:
      summary: Obtener temporada por ID
      description: Obtiene los detalles de una temporada específica
      tags: [Seasons]
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la temporada
          schema:
            type: string
      responses:
        '200':
          description: Temporada obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Season'
        '404':
          description: Temporada no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: Actualizar temporada
      description: Actualiza los datos de una temporada existente (requiere autenticación)
      tags: [Seasons]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la temporada
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeasonUpdate'
      responses:
        '200':
          description: Temporada actualizada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Temporada actualizada exitosamente'
                  data:
                    $ref: '#/components/schemas/Season'
        '400':
          description: Error de validación
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Temporada no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Eliminar temporada
      description: Elimina una temporada (no puede estar activa, requiere autenticación)
      tags: [Seasons]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la temporada
          schema:
            type: string
      responses:
        '200':
          description: Temporada eliminada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Temporada eliminada exitosamente'
        '400':
          description: No se puede eliminar temporada activa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: 'No se puede eliminar una temporada activa. Finalízala primero.'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Temporada no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /seasons/{id}/activate:
    post:
      summary: Activar temporada
      description: Activa una temporada y desactiva cualquier otra activa (requiere autenticación)
      tags: [Seasons]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la temporada a activar
          schema:
            type: string
      responses:
        '200':
          description: Temporada activada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Temporada activada exitosamente'
                  data:
                    $ref: '#/components/schemas/Season'
        '400':
          description: La temporada ya está activa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Temporada no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /seasons/{id}/complete:
    post:
      summary: Finalizar temporada
      description: Marca una temporada como completada (requiere autenticación)
      tags: [Seasons]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la temporada a finalizar
          schema:
            type: string
      responses:
        '200':
          description: Temporada finalizada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Temporada finalizada exitosamente'
                  data:
                    $ref: '#/components/schemas/Season'
        '400':
          description: La temporada ya está finalizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Temporada no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  # ========================================
  # PUNTOS (POINTS) - Sistema de Gamificación
  # ========================================

  /points/assign:
    post:
      summary: Asignar puntos manualmente
      description: Asigna puntos a un joven por una actividad específica (requiere autenticación)
      tags: [Points]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignPointsRequest'
      responses:
        '201':
          description: Puntos asignados exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Puntos asignados exitosamente'
                  data:
                    $ref: '#/components/schemas/PointsTransaction'
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /points/young/{youngId}/total:
    get:
      summary: Obtener puntos totales de un joven
      description: Obtiene el total de puntos acumulados por un joven en la temporada actual o especificada
      tags: [Points]
      security:
        - bearerAuth: []
      parameters:
        - name: youngId
          in: path
          required: true
          description: ID del joven
          schema:
            type: string
        - name: seasonId
          in: query
          required: false
          description: ID de la temporada (opcional, por defecto usa la activa)
          schema:
            type: string
      responses:
        '200':
          description: Puntos totales obtenidos exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      youngId:
                        type: string
                        example: '507f1f77bcf86cd799439011'
                      seasonId:
                        type: string
                        example: 'current'
                      totalPoints:
                        type: integer
                        example: 250
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /points/young/{youngId}/breakdown:
    get:
      summary: Obtener desglose de puntos
      description: Obtiene el desglose detallado de puntos por tipo (asistencia, actividades, referidos)
      tags: [Points]
      security:
        - bearerAuth: []
      parameters:
        - name: youngId
          in: path
          required: true
          description: ID del joven
          schema:
            type: string
        - name: seasonId
          in: query
          required: false
          description: ID de la temporada
          schema:
            type: string
      responses:
        '200':
          description: Desglose obtenido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/PointsBreakdown'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /points/young/{youngId}/history:
    get:
      summary: Obtener historial de puntos
      description: Obtiene el historial completo de transacciones de puntos de un joven
      tags: [Points]
      security:
        - bearerAuth: []
      parameters:
        - name: youngId
          in: path
          required: true
          description: ID del joven
          schema:
            type: string
        - name: seasonId
          in: query
          required: false
          description: ID de la temporada
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Límite de resultados
          schema:
            type: integer
            default: 50
        - name: skip
          in: query
          required: false
          description: Número de resultados a saltar (paginación)
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Historial obtenido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  count:
                    type: integer
                    example: 15
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PointsTransaction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /points/transactions:
    get:
      summary: Obtener todas las transacciones (admin)
      description: Obtiene todas las transacciones de puntos del sistema
      tags: [Points]
      security:
        - bearerAuth: []
      parameters:
        - name: seasonId
          in: query
          required: false
          description: Filtrar por temporada
          schema:
            type: string
        - name: type
          in: query
          required: false
          description: Filtrar por tipo de transacción
          schema:
            type: string
            enum: [ATTENDANCE, ACTIVITY, REFERRAL_BONUS, REFERRAL_WELCOME]
        - name: limit
          in: query
          required: false
          description: Límite de resultados
          schema:
            type: integer
            default: 100
        - name: skip
          in: query
          required: false
          description: Número de resultados a saltar
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Transacciones obtenidas exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  count:
                    type: integer
                    example: 50
                  total:
                    type: integer
                    example: 234
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PointsTransaction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /points/transactions/{id}:
    delete:
      summary: Eliminar transacción
      description: Elimina una transacción de puntos (solo para correcciones, requiere autenticación)
      tags: [Points]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la transacción
          schema:
            type: string
      responses:
        '200':
          description: Transacción eliminada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Transacción eliminada exitosamente'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Transacción no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    Young:
      type: object
      required:
        - fullName
        - ageRange
        - role
      properties:
        id:
          type: string
          description: ID único del joven
          example: 507f1f77bcf86cd799439011
        placa:
          type: string
          description: Placa única del joven (formato @MODxx### a @MODxxxx###)
          pattern: '^@MOD[A-Z]{2,4}\d{3}$'
          example: '@MODJAVI001'
        role_id:
          type: string
          description: ID del rol asignado al joven
          example: 507f1f77bcf86cd799439011
        role_name:
          type: string
          description: Nombre del rol asignado
          example: 'Young role'
        fullName:
          type: string
          description: Nombre completo del joven
          maxLength: 100
          example: Juan Pérez García
        ageRange:
          type: string
          enum:
            - '13-15'
            - '16-18'
            - '19-21'
            - '22-25'
            - '26-30'
            - '30+'
          description: Rango de edad del joven
          example: '19-21'
        phone:
          type: string
          description: Número de teléfono
          pattern: '^[\+]?[\d\s\-\(\)]{8,15}$'
          example: '+1234567890'
        birthday:
          type: string
          format: date
          description: Fecha de nacimiento
          example: '2000-05-15'
        profileImage:
          type: string
          format: uri
          description: URL de la imagen de perfil (Cloudinary)
          example: https://res.cloudinary.com/demo/image/upload/v1312461204/sample.jpg
        gender:
          type: string
          enum:
            - masculino
            - femenino
            - ''
          description: Género del joven
          example: masculino
        role:
          type: string
          enum:
            - lider juvenil
            - simpatizante
            - colaborador
            - joven adventista
            - director
            - subdirector
            - club guias
            - club conquistadores
            - club aventureros
            - escuela sabatica
          description: Rol del joven en la iglesia
          example: joven adventista
        email:
          type: string
          format: email
          description: Correo electrónico
          example: juan.perez@email.com
        skills:
          type: array
          items:
            type: string
          description: Habilidades del joven
          example:
            - música
            - predicación
            - liderazgo
        group:
          type: number
          minimum: 1
          maximum: 5
          description: Grupo para clasificación interna (1-5)
          example: 3
        first_login:
          type: boolean
          description: Indica si es el primer login del usuario
          example: false
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación del registro
          example: '2023-12-01T10:30:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: Fecha de última actualización
          example: '2023-12-01T15:45:00.000Z'

    YoungInput:
      type: object
      required:
        - fullName
        - ageRange
        - role
      properties:
        fullName:
          type: string
          description: Nombre completo del joven
          maxLength: 100
          example: Juan Pérez García
        ageRange:
          type: string
          enum:
            - '13-15'
            - '16-18'
            - '19-21'
            - '22-25'
            - '26-30'
            - '30+'
          description: Rango de edad del joven
          example: '19-21'
        phone:
          type: string
          description: Número de teléfono
          example: '+1234567890'
        birthday:
          type: string
          format: date
          description: Fecha de nacimiento
          example: '2000-05-15'
        gender:
          type: string
          enum:
            - masculino
            - femenino
            - ''
          description: Género del joven
          example: masculino
        role:
          type: string
          enum:
            - lider juvenil
            - simpatizante
            - colaborador
            - joven adventista
            - director
            - subdirector
            - club guias
            - club conquistadores
            - club aventureros
            - escuela sabatica
          description: Rol del joven en la iglesia
          example: joven adventista
        email:
          type: string
          format: email
          description: Correo electrónico
          example: juan.perez@email.com
        skills:
          type: array
          items:
            type: string
          description: Habilidades del joven
          example:
            - música
            - predicación
            - liderazgo
        group:
          type: number
          minimum: 1
          maximum: 5
          description: Grupo para clasificación interna (1-5)
          example: 3

    YoungStats:
      type: object
      properties:
        total:
          type: number
          description: Total de jóvenes registrados
          example: 150
        byAgeRange:
          type: object
          properties:
            '13-15':
              type: number
              example: 25
            '16-18':
              type: number
              example: 40
            '19-21':
              type: number
              example: 35
            '22-25':
              type: number
              example: 30
            '26-30':
              type: number
              example: 15
            '30+':
              type: number
              example: 5
        byRole:
          type: object
          additionalProperties:
            type: number
          example:
            joven adventista: 80
            lider juvenil: 20
            colaborador: 25
            simpatizante: 25
        byGender:
          type: object
          properties:
            masculino:
              type: number
              example: 75
            femenino:
              type: number
              example: 70
            '':
              type: number
              example: 5

    # ===== QR Schemas =====
    QRCode:
      type: object
      properties:
        id:
          type: string
          description: ID único del código QR
          example: '507f1f77bcf86cd799439011'
        code:
          type: string
          format: uuid
          description: Código UUID único para el QR
          example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479'
        qrImage:
          type: string
          format: uri
          description: URL de la imagen del código QR generada
          example: 'https://res.cloudinary.com/demo/image/upload/qr_codes/qr_20231201.png'
        date:
          type: string
          format: date
          description: Fecha para la cual es válido el QR
          example: '2023-12-01'
        expiresAt:
          type: string
          format: date-time
          description: Fecha y hora de expiración del QR
          example: '2023-12-01T23:59:59.000Z'
        isActive:
          type: boolean
          description: Indica si el QR está activo
          example: true
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación del QR
          example: '2023-12-01T08:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: Fecha de última actualización
          example: '2023-12-01T08:00:00.000Z'

    QRStats:
      type: object
      properties:
        qrCode:
          $ref: '#/components/schemas/QRCode'
        totalScans:
          type: number
          description: Total de escaneos del QR
          example: 45
        uniqueParticipants:
          type: number
          description: Número de participantes únicos que escanearon
          example: 42
        lastScanAt:
          type: string
          format: date-time
          description: Fecha y hora del último escaneo
          example: '2023-12-01T15:30:00.000Z'

    # ===== Attendance Schemas =====
    Attendance:
      type: object
      properties:
        id:
          type: string
          description: ID único del registro de asistencia
          example: '507f1f77bcf86cd799439011'
        young_id:
          type: string
          description: ID del joven que registró asistencia
          example: '507f1f77bcf86cd799439012'
        qr_id:
          type: string
          description: ID del código QR escaneado
          example: '507f1f77bcf86cd799439013'
        scannedAt:
          type: string
          format: date-time
          description: Fecha y hora del escaneo
          example: '2023-12-01T14:30:00.000Z'
        date:
          type: string
          format: date
          description: Fecha de la asistencia
          example: '2023-12-01'
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación del registro
          example: '2023-12-01T14:30:00.000Z'

    AttendanceWithUser:
      type: object
      allOf:
        - $ref: '#/components/schemas/Attendance'
        - type: object
          properties:
            youngId:
              type: object
              description: Información del joven que registró la asistencia
              properties:
                _id:
                  type: string
                  example: '507f1f77bcf86cd799439012'
                fullName:
                  type: string
                  example: 'Juan Pérez García'
                placa:
                  type: string
                  example: 'JP2023'
                  description: Identificador único del joven
                group:
                  type: string
                  example: '1'
                  description: Grupo al que pertenece el joven
                email:
                  type: string
                  format: email
                  example: 'juan.perez@example.com'
                profileImage:
                  type: string
                  format: uri
                  description: URL de la imagen de perfil en Cloudinary
                  example: 'https://res.cloudinary.com/demo/image/upload/v1234567890/profiles/sample.jpg'
            qrCodeId:
              type: object
              description: Información del código QR utilizado
              properties:
                _id:
                  type: string
                  example: '507f1f77bcf86cd799439013'
                generatedAt:
                  type: string
                  format: date-time
                  example: '2023-12-01T14:00:00.000Z'

    AttendanceStats:
      type: object
      properties:
        dateRange:
          type: object
          properties:
            startDate:
              type: string
              format: date
              example: '2023-12-01'
            endDate:
              type: string
              format: date
              example: '2023-12-31'
        totalAttendances:
          type: number
          description: Total de registros de asistencia en el período
          example: 450
        uniqueParticipants:
          type: number
          description: Número de participantes únicos
          example: 75
        averageDaily:
          type: number
          format: float
          description: Promedio diario de asistencias
          example: 15.5
        byDate:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
                example: '2023-12-01'
              count:
                type: number
                example: 42
        byAgeRange:
          type: object
          properties:
            '13-15':
              type: number
              example: 25
            '16-18':
              type: number
              example: 40
            '19-21':
              type: number
              example: 35
            '22-25':
              type: number
              example: 30
            '26-30':
              type: number
              example: 15
            '30+':
              type: number
              example: 5
        byRole:
          type: object
          additionalProperties:
            type: number
          example:
            joven adventista: 150
            lider juvenil: 80
            colaborador: 120
            simpatizante: 100

    HealthCheck:
      type: object
      properties:
        status:
          type: string
          example: OK
        message:
          type: string
          example: Youth Management API funcionando correctamente
        timestamp:
          type: string
          format: date-time
          example: '2023-12-01T10:30:00.000Z'

    Error:
      type: object
      properties:
        error:
          type: string
          description: Mensaje de error
          example: Recurso no encontrado
        details:
          type: string
          description: Detalles adicionales del error
          example: El joven con ID 507f1f77bcf86cd799439011 no existe

    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: Error de validación
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: fullName
              message:
                type: string
                example: El nombre completo es obligatorio

    # Esquemas de Autenticación
    LoginRequest:
      type: object
      required:
        - password
      properties:
        username:
          type: string
          description: Puedes usar email o placa
          example: 'jvrm.mora@gmail.com'
        password:
          type: string
          minLength: 8
          description: Contraseña del usuario
          example: 'Pinzon280615*'
      description: Credenciales de login. Se debe proporcionar email O placa junto con la contraseña

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Inicio de sesión exitoso'
        data:
          type: object
          properties:
            token:
              type: string
              description: Token JWT para autenticación
              example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
            expiresIn:
              type: string
              description: Tiempo de expiración del token
              example: '10d'
            first_login:
              type: boolean
              description: Indica si es el primer login del usuario
              example: true
    UserProfile:
      type: object
      properties:
        id:
          type: string
          example: '507f1f77bcf86cd799439011'
        fullName:
          type: string
          example: 'Javier Montaño'
        email:
          type: string
          format: email
          example: 'jvrm.mora@gmail.com'
        placa:
          type: string
          example: '@MODJAVI001'
        role_name:
          type: string
          example: 'Super Admin'
        role_id:
          type: string
          example: '507f1f77bcf86cd799439012'
        ageRange:
          type: string
          example: '22-25'
        phone:
          type: string
          example: '+57 300 123 4567'
        birthday:
          type: string
          format: date
          example: '1998-06-28'
        profileImage:
          type: string
          format: uri
          example: 'https://res.cloudinary.com/demo/image/upload/sample.jpg'
        gender:
          type: string
          enum: [masculino, femenino, '']
          example: 'masculino'
        role:
          type: string
          example: 'lider juvenil'
        skills:
          type: array
          items:
            type: string
          example: ['Liderazgo', 'Música', 'Predicación']
        group:
          type: number
          minimum: 1
          maximum: 5
          example: 1
        createdAt:
          type: string
          format: date-time
          example: '2023-12-01T10:30:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-12-01T10:30:00.000Z'

    # ===== Schemas de Sistema de Puntos y Temporadas =====
    Season:
      type: object
      properties:
        id:
          type: string
          description: ID único de la temporada
          example: '507f1f77bcf86cd799439011'
        name:
          type: string
          description: Nombre de la temporada
          minLength: 3
          maxLength: 100
          example: 'Temporada Q1 2024'
        description:
          type: string
          description: Descripción de la temporada
          example: 'Primera temporada del año 2024 con enfoque en asistencia y colaboración'
        startDate:
          type: string
          format: date
          description: Fecha de inicio de la temporada
          example: '2024-01-01'
        endDate:
          type: string
          format: date
          description: Fecha de finalización de la temporada
          example: '2024-03-31'
        status:
          type: string
          enum:
            - UPCOMING
            - ACTIVE
            - COMPLETED
          description: Estado actual de la temporada
          example: 'ACTIVE'
        pointsSettings:
          type: object
          description: Configuración de puntos para esta temporada
          properties:
            attendancePoints:
              type: number
              minimum: 0
              description: Puntos por asistencia
              example: 10
            activityPoints:
              type: number
              minimum: 0
              description: Puntos por actividad
              example: 10
            referrerPoints:
              type: number
              minimum: 0
              description: Puntos para quien refiere
              example: 30
            referredPoints:
              type: number
              minimum: 0
              description: Puntos para referido
              example: 10
        isActive:
          type: boolean
          description: Indica si la temporada está activa (solo una puede estar activa)
          example: true
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación del registro
          example: '2023-12-01T10:30:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: Fecha de última actualización
          example: '2023-12-01T15:45:00.000Z'

    SeasonCreate:
      type: object
      required:
        - name
        - startDate
        - endDate
      properties:
        name:
          type: string
          description: Nombre de la temporada
          minLength: 3
          maxLength: 100
          example: 'Temporada Q1 2024'
        description:
          type: string
          description: Descripción de la temporada
          example: 'Primera temporada del año 2024 con enfoque en asistencia y colaboración'
        startDate:
          type: string
          format: date
          description: Fecha de inicio de la temporada
          example: '2024-01-01'
        endDate:
          type: string
          format: date
          description: Fecha de finalización de la temporada
          example: '2024-03-31'
        pointsSettings:
          type: object
          description: Configuración opcional de puntos para esta temporada
          properties:
            attendancePoints:
              type: number
              minimum: 0
              description: Puntos por asistencia
              example: 10
            activityPoints:
              type: number
              minimum: 0
              description: Puntos por actividad
              example: 10
            referrerPoints:
              type: number
              minimum: 0
              description: Puntos para quien refiere
              example: 30
            referredPoints:
              type: number
              minimum: 0
              description: Puntos para referido
              example: 10

    SeasonUpdate:
      type: object
      properties:
        name:
          type: string
          description: Nombre de la temporada
          minLength: 3
          maxLength: 100
          example: 'Temporada Q1 2024 - Actualizada'
        description:
          type: string
          description: Descripción de la temporada
          example: 'Primera temporada actualizada del año 2024'
        startDate:
          type: string
          format: date
          description: Fecha de inicio de la temporada
          example: '2024-01-01'
        endDate:
          type: string
          format: date
          description: Fecha de finalización de la temporada
          example: '2024-03-31'
        pointsSettings:
          type: object
          description: Configuración de puntos para esta temporada
          properties:
            attendancePoints:
              type: number
              minimum: 0
              description: Puntos por asistencia
              example: 15
            activityPoints:
              type: number
              minimum: 0
              description: Puntos por actividad
              example: 15
            referrerPoints:
              type: number
              minimum: 0
              description: Puntos para quien refiere
              example: 35
            referredPoints:
              type: number
              minimum: 0
              description: Puntos para referido
              example: 15

    PointsTransaction:
      type: object
      properties:
        id:
          type: string
          description: ID único de la transacción
          example: '507f1f77bcf86cd799439011'
        youngId:
          type: string
          description: ID del joven que recibe los puntos
          example: '507f1f77bcf86cd799439012'
        seasonId:
          type: string
          description: ID de la temporada asociada
          example: '507f1f77bcf86cd799439013'
        type:
          type: string
          enum:
            - ATTENDANCE
            - ACTIVITY
            - REFERRER_BONUS
            - REFERRED_BONUS
          description: Tipo de transacción de puntos
          example: 'ATTENDANCE'
        points:
          type: number
          description: Cantidad de puntos otorgados
          example: 10
        description:
          type: string
          description: Descripción de la transacción
          example: 'Asistencia del 2024-01-06'
        metadata:
          type: object
          description: Datos adicionales específicos del tipo de transacción
          example:
            attendanceDate: '2024-01-06'
            qrCodeId: '507f1f77bcf86cd799439014'
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación del registro
          example: '2024-01-06T10:30:00.000Z'

    AssignPointsRequest:
      type: object
      required:
        - youngId
        - points
        - type
      properties:
        youngId:
          type: string
          description: ID del joven que recibirá los puntos
          example: '507f1f77bcf86cd799439012'
        points:
          type: number
          minimum: 1
          description: Cantidad de puntos a otorgar
          example: 10
        type:
          type: string
          enum:
            - ATTENDANCE
            - ACTIVITY
            - REFERRER_BONUS
            - REFERRED_BONUS
          description: Tipo de puntos a asignar
          example: 'ACTIVITY'
        description:
          type: string
          description: Descripción de por qué se otorgan los puntos
          example: 'Participación en actividad de servicio comunitario'
        metadata:
          type: object
          description: Información adicional opcional
          example:
            activityName: 'Servicio Comunitario'
            date: '2024-01-06'

    PointsBreakdown:
      type: object
      properties:
        total:
          type: number
          description: Total de puntos acumulados
          example: 150
        byType:
          type: object
          description: Puntos desglosados por tipo
          properties:
            ATTENDANCE:
              type: number
              example: 80
            ACTIVITY:
              type: number
              example: 50
            REFERRER_BONUS:
              type: number
              example: 30
            REFERRED_BONUS:
              type: number
              example: 10
        transactionCount:
          type: number
          description: Cantidad total de transacciones
          example: 15
        season:
          type: object
          description: Información de la temporada actual
          properties:
            id:
              type: string
              example: '507f1f77bcf86cd799439013'
            name:
              type: string
              example: 'Temporada Q1 2024'
            startDate:
              type: string
              format: date
              example: '2024-01-01'
            endDate:
              type: string
              format: date
              example: '2024-03-31'

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Mensaje de error
          example: 'Credenciales inválidas'
        details:
          type: string
          description: Detalles adicionales del error
          example: 'El email o contraseña proporcionados son incorrectos'

  responses:
    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ValidationError:
      description: Error de validación
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    ServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: No autorizado - Token JWT inválido o expirado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            tokenMissing:
              summary: Token faltante
              value:
                error: 'Token de acceso requerido'
                details: 'Debe proporcionar un token JWT válido en el header Authorization'
            tokenInvalid:
              summary: Token inválido
              value:
                error: 'Token inválido'
                details: 'El token JWT proporcionado no es válido'
            tokenExpired:
              summary: Token expirado
              value:
                error: 'Token expirado'
                details: 'El token JWT ha expirado, por favor inicie sesión nuevamente'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Token JWT para autenticación. Obtenga el token usando el endpoint POST /auth/login.

        **Ejemplo de uso:**
        ```
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        ```

        **Scopes disponibles:**
        - `young:read` - Leer información de jóvenes
        - `young:write` - Crear y actualizar jóvenes
        - `young:delete` - Eliminar jóvenes
        - `import:read` - Descargar plantillas y exportar datos
        - `import:write` - Importar datos desde Excel
        - `admin:all` - Acceso completo a todas las funciones
